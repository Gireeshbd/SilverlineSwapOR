{"ast":null,"code":"\"use strict\";\n\nvar _typeof = require(\"C:/Users/kiran/Documents/silverlineswap-main/node_modules/@babel/runtime/helpers/typeof.js\")[\"default\"];\n\nrequire(\"core-js/modules/es.object.define-property.js\");\n\nrequire(\"core-js/modules/es.date.to-json.js\");\n\nrequire(\"core-js/modules/web.url.to-json.js\");\n\nrequire(\"core-js/modules/es.array.for-each.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\n\nrequire(\"core-js/modules/es.error.to-string.js\");\n\nrequire(\"core-js/modules/es.date.to-string.js\");\n\nrequire(\"core-js/modules/es.regexp.to-string.js\");\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nrequire(\"core-js/modules/es.array.is-array.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.object.keys.js\");\n\nrequire(\"core-js/modules/es.array.index-of.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defineProperties = void 0;\n\nvar assert = require('assert');\n\nvar ethjsUtil = require('ethjs-util');\n\nvar rlp = require(\"rlp\");\n\nvar bytes_1 = require(\"./bytes\");\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param self the `Object` to define properties on\n * @param fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param data data to be validated against the definitions\n * @deprecated\n */\n\n\nexports.defineProperties = function (self, fields, data) {\n  self.raw = [];\n  self._fields = []; // attach the `toJSON`\n\n  self.toJSON = function (label) {\n    if (label === void 0) {\n      label = false;\n    }\n\n    if (label) {\n      var obj_1 = {};\n\n      self._fields.forEach(function (field) {\n        obj_1[field] = \"0x\" + self[field].toString('hex');\n      });\n\n      return obj_1;\n    }\n\n    return bytes_1.baToJSON(self.raw);\n  };\n\n  self.serialize = function serialize() {\n    return rlp.encode(self.raw);\n  };\n\n  fields.forEach(function (field, i) {\n    self._fields.push(field.name);\n\n    function getter() {\n      return self.raw[i];\n    }\n\n    function setter(v) {\n      v = bytes_1.toBuffer(v);\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = Buffer.allocUnsafe(0);\n      }\n\n      if (field.allowLess && field.length) {\n        v = bytes_1.stripZeros(v);\n        assert(field.length >= v.length, \"The field \" + field.name + \" must not have more \" + field.length + \" bytes\");\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        assert(field.length === v.length, \"The field \" + field.name + \" must have byte length of \" + field.length);\n      }\n\n      self.raw[i] = v;\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter\n    });\n\n    if (field[\"default\"]) {\n      self[field.name] = field[\"default\"];\n    } // attach alias\n\n\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter\n      });\n    }\n  }); // if the constuctor is passed data\n\n  if (data) {\n    if (typeof data === 'string') {\n      data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw new Error('wrong number of fields in data');\n      } // make sure all the items are buffers\n\n\n      data.forEach(function (d, i) {\n        self[self._fields[i]] = bytes_1.toBuffer(d);\n      });\n    } else if (_typeof(data) === 'object') {\n      var keys_1 = Object.keys(data);\n      fields.forEach(function (field) {\n        if (keys_1.indexOf(field.name) !== -1) self[field.name] = data[field.name];\n        if (keys_1.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];\n      });\n    } else {\n      throw new Error('invalid data');\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["assert","require","ethjsUtil","exports","self","fields","data","raw","_fields","toJSON","label","obj_1","forEach","field","toString","bytes_1","serialize","rlp","encode","i","push","name","getter","setter","v","allowZero","Buffer","allocUnsafe","allowLess","length","Object","defineProperty","enumerable","configurable","get","set","alias","from","stripHexPrefix","isBuffer","decode","Array","isArray","Error","d","keys_1","keys","indexOf"],"sourceRoot":"","sources":["../src/object.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}