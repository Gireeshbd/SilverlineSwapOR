{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.error.to-string.js\");\n\nrequire(\"core-js/modules/es.object.define-property.js\");\n\nrequire(\"core-js/modules/es.function.bind.js\");\n\nrequire(\"core-js/modules/es.date.to-string.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.regexp.to-string.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar ethUtil = require('ethereumjs-util');\n\nvar fees = require('ethereum-common/params.json');\n\nvar BN = ethUtil.BN; // secp256k1n/2\n\nvar N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n/**\n * Creates a new transaction object.\n *\n * @example\n * var rawTx = {\n *   nonce: '00',\n *   gasPrice: '09184e72a000',\n *   gasLimit: '2710',\n *   to: '0000000000000000000000000000000000000000',\n *   value: '00',\n *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',\n *   v: '1c',\n *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\n *   s: '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\n * };\n * var tx = new Transaction(rawTx);\n *\n * @class\n * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple.\n *\n * Or lastly an Object containing the Properties of the transaction like in the Usage example.\n *\n * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum\n *\n * @property {Buffer} raw The raw rlp encoded transaction\n * @param {Buffer} data.nonce nonce number\n * @param {Buffer} data.gasLimit transaction gas limit\n * @param {Buffer} data.gasPrice transaction gas price\n * @param {Buffer} data.to to the to address\n * @param {Buffer} data.value the amount of ether sent\n * @param {Buffer} data.data this will contain the data of the message or the init of a contract\n * @param {Buffer} data.v EC signature parameter\n * @param {Buffer} data.r EC signature parameter\n * @param {Buffer} data.s EC recovery ID\n * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3\n * */\n\nvar Transaction = function () {\n  function Transaction(data) {\n    _classCallCheck(this, Transaction);\n\n    data = data || {}; // Define Properties\n\n    var fields = [{\n      name: 'nonce',\n      length: 32,\n      allowLess: true,\n      \"default\": new Buffer([])\n    }, {\n      name: 'gasPrice',\n      length: 32,\n      allowLess: true,\n      \"default\": new Buffer([])\n    }, {\n      name: 'gasLimit',\n      alias: 'gas',\n      length: 32,\n      allowLess: true,\n      \"default\": new Buffer([])\n    }, {\n      name: 'to',\n      allowZero: true,\n      length: 20,\n      \"default\": new Buffer([])\n    }, {\n      name: 'value',\n      length: 32,\n      allowLess: true,\n      \"default\": new Buffer([])\n    }, {\n      name: 'data',\n      alias: 'input',\n      allowZero: true,\n      \"default\": new Buffer([])\n    }, {\n      name: 'v',\n      allowZero: true,\n      \"default\": new Buffer([0x1c])\n    }, {\n      name: 'r',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      \"default\": new Buffer([])\n    }, {\n      name: 's',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      \"default\": new Buffer([])\n    }];\n    /**\n     * Returns the rlp encoding of the transaction\n     * @method serialize\n     * @return {Buffer}\n     * @memberof Transaction\n     * @name serialize\n     */\n    // attached serialize\n\n    ethUtil.defineProperties(this, fields, data);\n    /**\n     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.\n     * @name from\n     * @memberof Transaction\n     */\n\n    Object.defineProperty(this, 'from', {\n      enumerable: true,\n      configurable: true,\n      get: this.getSenderAddress.bind(this)\n    }); // calculate chainId from signature\n\n    var sigV = ethUtil.bufferToInt(this.v);\n    var chainId = Math.floor((sigV - 35) / 2);\n    if (chainId < 0) chainId = 0; // set chainId\n\n    this._chainId = chainId || data.chainId || 0;\n    this._homestead = true;\n  }\n  /**\n   * If the tx's `to` is to the creation address\n   * @return {Boolean}\n   */\n\n\n  Transaction.prototype.toCreationAddress = function toCreationAddress() {\n    return this.to.toString('hex') === '';\n  };\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.hash = function hash(includeSignature) {\n    if (includeSignature === undefined) includeSignature = true; // EIP155 spec:\n    // when computing the hash of a transaction for purposes of signing or recovering,\n    // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),\n    // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0\n\n    var items = void 0;\n\n    if (includeSignature) {\n      items = this.raw;\n    } else {\n      if (this._chainId > 0) {\n        var raw = this.raw.slice();\n        this.v = this._chainId;\n        this.r = 0;\n        this.s = 0;\n        items = this.raw;\n        this.raw = raw;\n      } else {\n        items = this.raw.slice(0, 6);\n      }\n    } // create hash\n\n\n    return ethUtil.rlphash(items);\n  };\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getChainId = function getChainId() {\n    return this._chainId;\n  };\n  /**\n   * returns the sender's address\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getSenderAddress = function getSenderAddress() {\n    if (this._from) {\n      return this._from;\n    }\n\n    var pubkey = this.getSenderPublicKey();\n    this._from = ethUtil.publicToAddress(pubkey);\n    return this._from;\n  };\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getSenderPublicKey = function getSenderPublicKey() {\n    if (!this._senderPubKey || !this._senderPubKey.length) {\n      if (!this.verifySignature()) throw new Error('Invalid Signature');\n    }\n\n    return this._senderPubKey;\n  };\n  /**\n   * Determines if the signature is valid\n   * @return {Boolean}\n   */\n\n\n  Transaction.prototype.verifySignature = function verifySignature() {\n    var msgHash = this.hash(false); // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n\n    if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {\n      return false;\n    }\n\n    try {\n      var v = ethUtil.bufferToInt(this.v);\n\n      if (this._chainId > 0) {\n        v -= this._chainId * 2 + 8;\n      }\n\n      this._senderPubKey = ethUtil.ecrecover(msgHash, v, this.r, this.s);\n    } catch (e) {\n      return false;\n    }\n\n    return !!this._senderPubKey;\n  };\n  /**\n   * sign a transaction with a given a private key\n   * @param {Buffer} privateKey\n   */\n\n\n  Transaction.prototype.sign = function sign(privateKey) {\n    var msgHash = this.hash(false);\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n\n    if (this._chainId > 0) {\n      sig.v += this._chainId * 2 + 8;\n    }\n\n    Object.assign(this, sig);\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getDataFee = function getDataFee() {\n    var data = this.raw[5];\n    var cost = new BN(0);\n\n    for (var i = 0; i < data.length; i++) {\n      data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);\n    }\n\n    return cost;\n  };\n  /**\n   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getBaseFee = function getBaseFee() {\n    var fee = this.getDataFee().iaddn(fees.txGas.v);\n\n    if (this._homestead && this.toCreationAddress()) {\n      fee.iaddn(fees.txCreation.v);\n    }\n\n    return fee;\n  };\n  /**\n   * the up front amount that an account must have for this transaction to be valid\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getUpfrontCost = function getUpfrontCost() {\n    return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));\n  };\n  /**\n   * validates the signature and checks to see if it has enough gas\n   * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean\n   * @return {Boolean|String}\n   */\n\n\n  Transaction.prototype.validate = function validate(stringError) {\n    var errors = [];\n\n    if (!this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n\n    if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {\n      errors.push(['gas limit is too low. Need at least ' + this.getBaseFee()]);\n    }\n\n    if (stringError === undefined || stringError === false) {\n      return errors.length === 0;\n    } else {\n      return errors.join(' ');\n    }\n  };\n\n  return Transaction;\n}();\n\nmodule.exports = Transaction;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","ethUtil","require","fees","BN","N_DIV_2","Transaction","data","fields","name","length","allowLess","Buffer","alias","allowZero","defineProperties","Object","defineProperty","enumerable","configurable","get","getSenderAddress","bind","sigV","bufferToInt","v","chainId","Math","floor","_chainId","_homestead","prototype","toCreationAddress","to","toString","hash","includeSignature","undefined","items","raw","slice","r","s","rlphash","getChainId","_from","pubkey","getSenderPublicKey","publicToAddress","_senderPubKey","verifySignature","Error","msgHash","cmp","ecrecover","e","sign","privateKey","sig","ecsign","assign","getDataFee","cost","i","iaddn","txDataZeroGas","txDataNonZeroGas","getBaseFee","fee","txGas","txCreation","getUpfrontCost","gasLimit","imul","gasPrice","iadd","value","validate","stringError","errors","push","join","module","exports"],"sources":["C:/Users/kiran/Documents/silverlineswap-main/node_modules/ethereumjs-tx/es5/index.js"],"sourcesContent":["'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ethUtil = require('ethereumjs-util');\nvar fees = require('ethereum-common/params.json');\nvar BN = ethUtil.BN;\n\n// secp256k1n/2\nvar N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n\n/**\n * Creates a new transaction object.\n *\n * @example\n * var rawTx = {\n *   nonce: '00',\n *   gasPrice: '09184e72a000',\n *   gasLimit: '2710',\n *   to: '0000000000000000000000000000000000000000',\n *   value: '00',\n *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',\n *   v: '1c',\n *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',\n *   s: '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'\n * };\n * var tx = new Transaction(rawTx);\n *\n * @class\n * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple.\n *\n * Or lastly an Object containing the Properties of the transaction like in the Usage example.\n *\n * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum\n *\n * @property {Buffer} raw The raw rlp encoded transaction\n * @param {Buffer} data.nonce nonce number\n * @param {Buffer} data.gasLimit transaction gas limit\n * @param {Buffer} data.gasPrice transaction gas price\n * @param {Buffer} data.to to the to address\n * @param {Buffer} data.value the amount of ether sent\n * @param {Buffer} data.data this will contain the data of the message or the init of a contract\n * @param {Buffer} data.v EC signature parameter\n * @param {Buffer} data.r EC signature parameter\n * @param {Buffer} data.s EC recovery ID\n * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3\n * */\n\nvar Transaction = function () {\n  function Transaction(data) {\n    _classCallCheck(this, Transaction);\n\n    data = data || {};\n    // Define Properties\n    var fields = [{\n      name: 'nonce',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'gasPrice',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'gasLimit',\n      alias: 'gas',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'to',\n      allowZero: true,\n      length: 20,\n      default: new Buffer([])\n    }, {\n      name: 'value',\n      length: 32,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 'data',\n      alias: 'input',\n      allowZero: true,\n      default: new Buffer([])\n    }, {\n      name: 'v',\n      allowZero: true,\n      default: new Buffer([0x1c])\n    }, {\n      name: 'r',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new Buffer([])\n    }, {\n      name: 's',\n      length: 32,\n      allowZero: true,\n      allowLess: true,\n      default: new Buffer([])\n    }];\n\n    /**\n     * Returns the rlp encoding of the transaction\n     * @method serialize\n     * @return {Buffer}\n     * @memberof Transaction\n     * @name serialize\n     */\n    // attached serialize\n    ethUtil.defineProperties(this, fields, data);\n\n    /**\n     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.\n     * @name from\n     * @memberof Transaction\n     */\n    Object.defineProperty(this, 'from', {\n      enumerable: true,\n      configurable: true,\n      get: this.getSenderAddress.bind(this)\n    });\n\n    // calculate chainId from signature\n    var sigV = ethUtil.bufferToInt(this.v);\n    var chainId = Math.floor((sigV - 35) / 2);\n    if (chainId < 0) chainId = 0;\n\n    // set chainId\n    this._chainId = chainId || data.chainId || 0;\n    this._homestead = true;\n  }\n\n  /**\n   * If the tx's `to` is to the creation address\n   * @return {Boolean}\n   */\n\n\n  Transaction.prototype.toCreationAddress = function toCreationAddress() {\n    return this.to.toString('hex') === '';\n  };\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx\n   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.hash = function hash(includeSignature) {\n    if (includeSignature === undefined) includeSignature = true;\n\n    // EIP155 spec:\n    // when computing the hash of a transaction for purposes of signing or recovering,\n    // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),\n    // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0\n\n    var items = void 0;\n    if (includeSignature) {\n      items = this.raw;\n    } else {\n      if (this._chainId > 0) {\n        var raw = this.raw.slice();\n        this.v = this._chainId;\n        this.r = 0;\n        this.s = 0;\n        items = this.raw;\n        this.raw = raw;\n      } else {\n        items = this.raw.slice(0, 6);\n      }\n    }\n\n    // create hash\n    return ethUtil.rlphash(items);\n  };\n\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getChainId = function getChainId() {\n    return this._chainId;\n  };\n\n  /**\n   * returns the sender's address\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getSenderAddress = function getSenderAddress() {\n    if (this._from) {\n      return this._from;\n    }\n    var pubkey = this.getSenderPublicKey();\n    this._from = ethUtil.publicToAddress(pubkey);\n    return this._from;\n  };\n\n  /**\n   * returns the public key of the sender\n   * @return {Buffer}\n   */\n\n\n  Transaction.prototype.getSenderPublicKey = function getSenderPublicKey() {\n    if (!this._senderPubKey || !this._senderPubKey.length) {\n      if (!this.verifySignature()) throw new Error('Invalid Signature');\n    }\n    return this._senderPubKey;\n  };\n\n  /**\n   * Determines if the signature is valid\n   * @return {Boolean}\n   */\n\n\n  Transaction.prototype.verifySignature = function verifySignature() {\n    var msgHash = this.hash(false);\n    // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) {\n      return false;\n    }\n\n    try {\n      var v = ethUtil.bufferToInt(this.v);\n      if (this._chainId > 0) {\n        v -= this._chainId * 2 + 8;\n      }\n      this._senderPubKey = ethUtil.ecrecover(msgHash, v, this.r, this.s);\n    } catch (e) {\n      return false;\n    }\n\n    return !!this._senderPubKey;\n  };\n\n  /**\n   * sign a transaction with a given a private key\n   * @param {Buffer} privateKey\n   */\n\n\n  Transaction.prototype.sign = function sign(privateKey) {\n    var msgHash = this.hash(false);\n    var sig = ethUtil.ecsign(msgHash, privateKey);\n    if (this._chainId > 0) {\n      sig.v += this._chainId * 2 + 8;\n    }\n    Object.assign(this, sig);\n  };\n\n  /**\n   * The amount of gas paid for the data in this tx\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getDataFee = function getDataFee() {\n    var data = this.raw[5];\n    var cost = new BN(0);\n    for (var i = 0; i < data.length; i++) {\n      data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);\n    }\n    return cost;\n  };\n\n  /**\n   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getBaseFee = function getBaseFee() {\n    var fee = this.getDataFee().iaddn(fees.txGas.v);\n    if (this._homestead && this.toCreationAddress()) {\n      fee.iaddn(fees.txCreation.v);\n    }\n    return fee;\n  };\n\n  /**\n   * the up front amount that an account must have for this transaction to be valid\n   * @return {BN}\n   */\n\n\n  Transaction.prototype.getUpfrontCost = function getUpfrontCost() {\n    return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));\n  };\n\n  /**\n   * validates the signature and checks to see if it has enough gas\n   * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean\n   * @return {Boolean|String}\n   */\n\n\n  Transaction.prototype.validate = function validate(stringError) {\n    var errors = [];\n    if (!this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n\n    if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) {\n      errors.push(['gas limit is too low. Need at least ' + this.getBaseFee()]);\n    }\n\n    if (stringError === undefined || stringError === false) {\n      return errors.length === 0;\n    } else {\n      return errors.join(' ');\n    }\n  };\n\n  return Transaction;\n}();\n\nmodule.exports = Transaction;"],"mappings":"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"},"metadata":{},"sourceType":"script"}